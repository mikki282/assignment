TERRAFORM
* Make infrastructure auditable and automate your infrastructure.
* It is a tool of choice which makes the entire lifecycle of infrastructure using ‘infrastructure as code’ .
* Here infrastructure as code means we make cloud servers using code instead of through manual process.
* Take a example: we are a cloud provider and at some time we have to provide several number of resources of specific type, so manually what we did go to the API and create resources again and again but in terraform what we do, define the type of resource and number of resources into config file and then terraform use these file to communicate with API.
* First resource to be created in any project using terraform is the provider because this is what gives us access to the API and then we will interact to create resources.
* Terraform has more than 100 cloud providers and these enable interfacing with the specific API.
* Ansible ,chef , puppet have a focus on automating the installation and configuration of s/w.
* When you want to automate m/c itself then ansible ,chef etc is the better option instead of terraform.
* Here is four most important command of terraform:
* Terraform init : this command initialises the terraform's plugins and all.
* Terraform plan: Reads the current state of any already-existing remote objects to make sure that the Terraform state is up-to-date.
* Terraform apply: to apply all changes and operations.
* Terraform destroy: to destroy the work that we are done by using terraform.
* Others command:
* Terraform : list out the all command.
* Terraform state list: list out the resources that we have a state form.
* Terraform state : show subcommand for advanced state management.
* Terraform state show <resource_nm>: give detailed output about specific commands.
* Terraform apply --auto-approve: auto approved
* Terraform module: 
A Terraform module is a collection of standard configuration files in a dedicated directory. Terraform modules encapsulate groups of resources dedicated to one task.
* How to use terraform module: 
  declare that you want to use terraform.
                      Terraform  <name of module>{
                       Source = “give the path of module file”
                        Version = “terraform version”
                    }
                           Argument 1
                           Argument 2
                                 |
                                 | 
                                 |            
                          Argument n